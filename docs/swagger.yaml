basePath: /api/v1
definitions:
  config.APIError:
    properties:
      error:
        type: string
    type: object
  models.Todo:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    required:
    - description
    - title
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a template project for upcoming golang project ideas. It uses
    gorm as ORM with Postgres and also uses JWT auth middleware if GIN_MODE=release
    is set in .env / .env-docker
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Golang Project Template
  version: "1.0"
paths:
  /todo:
    get:
      consumes:
      - application/json
      description: FindAll Todo List
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/config.APIError'
      security:
      - ApiKeyAuth: []
      summary: FindAll Todo List
      tags:
      - Todo
    post:
      consumes:
      - application/json
      description: Create Todo
      parameters:
      - description: Create Todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/config.APIError'
      security:
      - ApiKeyAuth: []
      summary: Create Todo
      tags:
      - Todo
  /todo/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Todo
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/config.APIError'
      security:
      - ApiKeyAuth: []
      summary: Delete Todo
      tags:
      - Todo
    get:
      consumes:
      - application/json
      description: FindById Todo
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.APIError'
      security:
      - ApiKeyAuth: []
      summary: FindById Todo
      tags:
      - Todo
    put:
      consumes:
      - application/json
      description: Update Todo
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/config.APIError'
      security:
      - ApiKeyAuth: []
      summary: Update Todo
      tags:
      - Todo
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
